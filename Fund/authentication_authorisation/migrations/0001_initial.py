# Generated by Django 4.2.10 on 2024-02-18 08:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userRole', models.CharField(choices=[('Admin', 'Admin'), ('Manager', 'Manager'), ('Employee', 'Employee')], default='Employee')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FundGroup',
            fields=[
                ('group_id', models.IntegerField(auto_created=True, primary_key=True, serialize=False)),
                ('group_name', models.CharField(max_length=30)),
                ('group_description', models.TextField(blank=True, default='', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Group_User_Details',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joinRequest', models.CharField(choices=[('Requested', 'Requested'), ('Approved', 'Approved')], default='Requested')),
                ('roles', models.CharField(choices=[('Simple', 'Simple'), ('Admin', 'Admin')], default='Simple')),
                ('g_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication_authorisation.fundgroup')),
                ('u_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FundTransaction',
            fields=[
                ('transaction_id', models.IntegerField(auto_created=True, primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('Birthday', 'Birthday'), ('Fine', 'Fine'), ('Personal_achievement', 'Personal_achievement'), ('others', 'others')], default='Birthday')),
                ('amount', models.IntegerField()),
                ('trans_desc', models.TextField(max_length=100)),
                ('status_pending', models.CharField(choices=[('Pending', 'Pending'), ('Settled', 'Settled')], default='Pending')),
                ('status_revoke_approve', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Revoked', 'Revoked')], default='Pending')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('request_raised_against', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='against', to=settings.AUTH_USER_MODEL)),
                ('request_raised_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raised', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
